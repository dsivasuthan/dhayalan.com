<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0062)http://www.uctamil.8m.com/cgi-bin/framed/2228/visualbasic.html -->
<HTML><HEAD><TITLE>UCTamil</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="MSHTML 6.00.2900.3157" name=GENERATOR></HEAD>
<BODY vLink=maroon link=brown bgColor=#bcd8dc>
<h1>Dhayalan Sivasuthan</h1>
<!font color=blue>
<H1 align=CENTER>
<FONT color=#000000>Visual Basic language</FONT></H1>
<B><p align=center>
<A href="#vb_creat">Creating a VB Application</A> 
| <A href="#data_stru">Data Structures</A> 
| <A href="#function">Functions</A> 
| <A href="#pro_control">Program Control</A> </B>
</p>
<P align=left><B>
</B></P>
<A name=vb_creat></A>
<H1>
<CENTER><FONT color=#008000>Creating a Visual Basic 
Application</FONT></CENTER></H1>
<H2><I>Getting Started!</I></H2>
<P>Before any programming can begin Visual Basic itself must be located and run. 
There are two ways to do this:</P>
<OL>
  <LI>
  <P><B>Using ‘Start’ button Shortcut:</B><BR>Click on 
  ‘Start’<BR>Microsoft<BR>Microsoft Visual Basic 6.0<BR>Visual Basic 6.0</P>
  <LI>
  <P><B>Directly from the Network:</B><BR>Change directory to 
  N:\Msoft\DevStudio\VB6<BR>Then double-click VB6.EXE<BR></P></LI></OL><BR>
<P>If VB has been sucessfully started a dialog box. At this point select either 
‘Standard EXE’ or ‘VB Professional Edition Controls’. The professional option 
contains a wider variety of controls in the toolbox.</P>
<HR>

<H2><I>Creating a program is as simple as 1, 2, 3:</I></H2>
<OL>
  <LI>
  <P>Designing the interface. This is done interactively without the need to 
  program. Screen objects (or controls) are selected from the toolbox, placed 
  and sized using the mouse.</P>
  <LI>
  <P>Setting the properties of the screen objects to change such things as 
  colours and labels.</P>
  <LI>
  <P>Writing program code to specify what will happen as users interact with the 
  screen objects. This step is often described as providing the 
  ‘functionality’.</P></LI></OL><BR>
<P>Before setting out to write a program, one must have a task in mind. One must 
also understand the characteristics of the various screen objects in order to 
make good choices for the interface. VB Help gives a brief description of each 
toolbox icon (click on the ‘search’ button then enter ‘tool’, double click on 
‘toolbox’ in the lower window), refer to this if unsure about which item to 
choose.</P><BR>
<H2><I>1. Designing the interface</I></H2>
<P>When you launch VB the environment is in design mode (see title bar). This 
means that the system is ready for you to start to build an application. You may 
also load an application that has been previously saved, run it, or continue to 
work on it. In design mode VB presents a blank form, labelled <TT>Form1</TT>. 
This is where the interface (or the first screen of the interface) is 
constructed.</P>
<P>To place a control on <TT>Form1</TT>, double click on a toolbox icon. That 
object appears in the centre of the form. From here the object may be dragged 
into place using the mouse. Clicking on the object reveals sizing handles as 
shown around the horizontal scroll bar.</P>
<P>Moving the mouse over a sizing handle changes the cursor to a double headed 
arrow. Clicking and dragging on sizing handles allows the object to be sized 
horizontally and/or vertically.</P>
<P>Here is the interface for the calculator that is supplied as a sample 
application in <TT>...\VB\samples\PGuide\calc\Calc.vbp</TT>. The familiar 
buttons are created using command buttons and the readout appears in a 
label.</P><BR>
<H2><I>2. Setting Properties</I></H2>
<P>Properties are set using the properties window. If this is not visible use 
the Windows menu to invoke it. In the calculator example above, the command 
buttons have been given captions corresponding to symbols such as ‘1’, ‘2’, ‘%’, 
‘=’.</P>
<P>To set the properties of a screen object. Click on the object. The object box 
(under the properties title bar) then displays the name of the object. This is a 
list box that can be used to select any of the objects on the current form. Just 
below the object box is the settings box. This displays the current value of the 
property selected from the properties list underneath it. When the property 
value you want appears in the settings box it can be edited. This done by 
typing, or by selecting from a pre-defined list of possible values (obtained by 
clicking on the down arrow to the right of the settings list - if this is 
activated).</P>
<P>In the VB sample application, the calculator readout background colour is 
yellow. This was achieved by selecting the label object. Selecting the property 
<TT>BackColor</TT>, dropping down the colour palette and selecting the required 
colour cell.</P><BR>
<H2><I>3. Writing program code</I></H2>
<P>The final step is writing the code that activates the application, or makes 
it run. The screen shot below shows a window displaying code for the ‘CE’ 
command button (CancelEntry).</P>
<P>Once the correct control object has been selected the next step is to choose 
which event the control is going to respond to. Any event for the current 
control can be selected by using the right hand drop-down menu. In the example 
below the window is currently showing code associated with the ‘<TT>Click</TT>’ 
event of the ‘<TT>CancelEntry_Click</TT>’ control object.</P>
<P><B>Note:</B> Since version 4 of VB the code window can display multiple 
procedures. The horizontal line drawn half way down the window signifies a 
division between two different subroutines. The top one is ‘CancelEntry_Click’ 
and the bottom is ‘Decimal_Click’.</P>
<P>Below is a list of all Visual Basic events. It should be noted than each 
control only uses a <B>subset</B> of events. The top right combo box in the code 
window will display all relevant events for the current control object.</P>
<DIV align=center><TT>
<TABLE cellSpacing=0 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD bgColor=#808080>
      <TABLE cellSpacing=1 cellPadding=2 border=0>
        <TBODY>
        <TR>
          <TD width=120 bgColor=#ffffff>Activate</TD>
          <TD width=120 bgColor=#ffffff>KeyUp</TD>
          <TD width=120 bgColor=#ffffff>PathChange</TD></TR>
        <TR>
          <TD bgColor=#ffffff>Change</TD>
          <TD bgColor=#ffffff>LinkClose</TD>
          <TD bgColor=#ffffff>PatternChange</TD></TR>
        <TR>
          <TD bgColor=#ffffff>Click</TD>
          <TD bgColor=#ffffff>LinkError</TD>
          <TD bgColor=#ffffff>QueryUnload</TD></TR>
        <TR>
          <TD bgColor=#ffffff>DblClick</TD>
          <TD bgColor=#ffffff>LinkExecute</TD>
          <TD bgColor=#ffffff>Reposition</TD></TR>
        <TR>
          <TD bgColor=#ffffff>Deactivate</TD>
          <TD bgColor=#ffffff>LinkNotify</TD>
          <TD bgColor=#ffffff>Resize</TD></TR>
        <TR>
          <TD bgColor=#ffffff>DragDrop</TD>
          <TD bgColor=#ffffff>LinkOpen</TD>
          <TD bgColor=#ffffff>RowColChange</TD></TR>
        <TR>
          <TD bgColor=#ffffff>DragOver</TD>
          <TD bgColor=#ffffff>Load</TD>
          <TD bgColor=#ffffff>Scroll</TD></TR>
        <TR>
          <TD bgColor=#ffffff>DropDown</TD>
          <TD bgColor=#ffffff>LostFocus</TD>
          <TD bgColor=#ffffff>SelChange</TD></TR>
        <TR>
          <TD bgColor=#ffffff>Error</TD>
          <TD bgColor=#ffffff>MouseDown</TD>
          <TD bgColor=#ffffff>Timer</TD></TR>
        <TR>
          <TD bgColor=#ffffff>GotFocus</TD>
          <TD bgColor=#ffffff>MouseMove</TD>
          <TD bgColor=#ffffff>Unload</TD></TR>
        <TR>
          <TD bgColor=#ffffff>KeyDown</TD>
          <TD bgColor=#ffffff>MouseUp</TD>
          <TD bgColor=#ffffff>Updated</TD></TR>
        <TR>
          <TD bgColor=#ffffff>KeyPress</TD>
          <TD bgColor=#ffffff>Paint</TD>
          <TD 
bgColor=#ffffff>Validate</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></TT></DIV>
<P>After completing the above three steps (design interface, set properties, and 
write code), the application can be run. When you have finished running the 
application you can terminate its execution. After stopping an application you 
will be returned back to <I>design</I> mode again where further changes can be 
made to the interface or program code.</P>
<HR>
<A name=data_stru></A>
<H1>
<CENTER><FONT color=#008000>Data Structures</FONT></CENTER></H1><B>
<CENTER>[ <A href="#Variables">Variables</A> 
| <A 
href="#Static Variables">Static 
Variables</A> | <A 
href="#Constants">Constants</A> 
| <A 
href="#Arrays">Arrays</A> 
| <A 
href="#Dynamic Arrays">Dynamic 
Arrays</A> ]</CENTER><BR></B>
<HR>
<A name=Variables>
<H2><I>Variables</I></H2></A>
<P>Variables are data structures which are used to store information. There are 
two main types of information which can be stored: numbers and text. Before 
using a variable it must first be created:</P><B><PRE>  Dim</B> <I>variable_name</I> <B>As <I>Type</I>

</PRE></B>Example:<B> <PRE>  <FONT color=#23238e>Dim</FONT> price <FONT color=#23238e>As Long</FONT>

  <FONT color=#23238e>Dim</FONT> registration_plate <FONT color=#23238e>As String</FONT>



</PRE></B>
<DIV align=center>
<TABLE cellSpacing=0 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD bgColor=#808080>
      <TABLE cellSpacing=1 cellPadding=4 width=600 border=0>
        <TBODY>
        <TR>
          <TH bgColor=#808080><FONT color=#ffffff>Type</FONT></TH>
          <TH bgColor=#808080><FONT color=#ffffff>Size</FONT></TH>
          <TH bgColor=#808080><FONT color=#ffffff>Allowable 
Ranges</FONT></TH></TR>
        <TR>
          <TD bgColor=#ffffff><B>Boolean</B></TD>
          <TD bgColor=#ffffff>2 bytes</TD>
          <TD bgColor=#ffffff>TRUE or FALSE</TD></TR>
        <TR>
          <TD bgColor=#ffffff><B>Byte</B></TD>
          <TD bgColor=#ffffff>1 byte</TD>
          <TD bgColor=#ffffff>0 to 255</TD></TR>
        <TR>
          <TD bgColor=#ffffff><B>Currency</B></TD>
          <TD bgColor=#ffffff>8 bytes</TD>
          <TD bgColor=#ffffff>-922337203685477.5808 to 
        922337203685477.5807</TD></TR>
        <TR>
          <TD bgColor=#ffffff><B>Date</B></TD>
          <TD bgColor=#ffffff>8 bytes</TD>
          <TD bgColor=#ffffff>January 1, 100 to December 31, 9999</TD></TR>
        <TR>
          <TD bgColor=#ffffff><B>Decimal</B></TD>
          <TD bgColor=#ffffff>14 bytes</TD>
          <TD bgColor=#ffffff>+/-79,228,162,514,264,337,593,543,950,335 with 
            no decimal point;<BR>+/-7.9228162514264337593543950335 with 28 
            places to the right of the decimal; smallest non-zero number 
            is<BR>+/-0.0000000000000000000000000001</TD></TR>
        <TR>
          <TD bgColor=#ffffff><B>Double</B></TD>
          <TD bgColor=#ffffff>8 bytes</TD>
          <TD bgColor=#ffffff>-1.79769313486232D308 to 
            -4.94065645841247D-324<BR>4.94065645841247D-324 to 
            1.79769313486232D308</TD></TR>
        <TR>
          <TD bgColor=#ffffff><B>Integer</B></TD>
          <TD bgColor=#ffffff>2 bytes</TD>
          <TD bgColor=#ffffff>-32,768 to 32,767</TD></TR>
        <TR>
          <TD bgColor=#ffffff><B>Long</B></TD>
          <TD bgColor=#ffffff>4 bytes</TD>
          <TD bgColor=#ffffff>-2,147,483,648 to 2,147,483,647</TD></TR>
        <TR>
          <TD bgColor=#ffffff><B>Single</B></TD>
          <TD bgColor=#ffffff>4 bytes</TD>
          <TD bgColor=#ffffff>-3.402823D38 to -1.401298D-45<BR>1.401298E-45 to 
            3.402823E38</TD></TR>
        <TR>
          <TD bgColor=#ffffff><B>String</B></TD>
          <TD bgColor=#ffffff>10 bytes + string length</TD>
          <TD bgColor=#ffffff>0 to 65,000 bytes</TD></TR>
        <TR>
          <TD bgColor=#ffffff rowSpan=3><B>Variant</B></TD>
          <TD bgColor=#ffffff>16 bytes</TD>
          <TD bgColor=#ffffff>Numeric: same as Double</TD></TR>
        <TR>
          <TD bgColor=#ffffff>22 bytes + string length</TD>
          <TD bgColor=#ffffff>String: same as String</TD></TR>
        <TR>
          <TD bgColor=#ffffff>Number required by elements</TD>
          <TD bgColor=#ffffff>User defined type</TD></TR>
        <TR>
          <TD bgColor=#ffffff colSpan=3><I>If a new variable is declared 
            without specifying a type then by default it will be made type 
            Variant.</I></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></DIV><BR>
<P>Once a new variable has been created a value can be assigned to it for 
storage. To do this the ‘=’ operator is used. The first example assigns a 
constant to a variable, while the second assigns the contents of another 
variable multiplied by ten.</P>Example 1: <B><TT>price <FONT 
color=#23238e>=</FONT> 29.95</TT></B><BR>Example 2: <B><TT>total_price <FONT 
color=#23238e>=</FONT> price <FONT color=#23238e>*</FONT> 10</TT></B> 
<P>The <I>scope</I> of a variable is defined as its operating range. There are 
three types of varible scope:</P>
<OL>
  <LI><B>Local</B> - Variable can only be used in the current procedure (use 
  <TT>Dim</TT> within the required procedure). 
  <LI><B>Module</B> - Variable can only be accessed in any procedure in the 
  current form of module (use <TT>Private </TT>within the <I>Declarations</I> 
  section on a form or module). 
  <LI><B>Public</B> - Can be accessed in any procedure in any module (use 
  <TT>Public</TT> within the <I>Declarations</I> section of a module). 
</LI></OL><BR>
<HR>
<A name="Static Variables">
<H2><I>Static Variables</I></H2></A>
<P>Declaring variables and arrays (<A 
href="http://www.uctamil.8m.com/cgi-bin/framed/2228/visualbasic.html#Arrays">see 
below</A>) as <I>local</I> to the current procedure/function is useful because 
it minimises strange side-effects which can occur with <I>public</I> variables. 
However, when using a local variable in a procedure VB creates memory space to 
hold the variable’s contents when it reads the <TT>Dim</TT> statement, but when 
it gets to the end of the procedure (<TT>End Sub</TT>) it frees the space 
allocated to the local variable. Add the following code to a command button and 
see what values are printed:</P><B><PRE>  <FONT color=#23238e>Private Sub</FONT> Command1_Click ()

    <FONT color=#23238e>Dim</FONT> number <FONT color=#23238e>As Integer</FONT>           <FONT color=green>' Create a normal local variable</FONT>



    number = number + 1

    <FONT color=#23238e>Print</FONT> number

  <FONT color=#23238e>End Sub</FONT>

</PRE></B>
<P>After clicking on the command button a few times you should see a whole 
column of 1’s down the left hand side of the form. The value never gets above 1 
even though 1 is added to the variable each time. This is because each time the 
procedure is called, by clicking on the command button, VB is working with a 
different variable. It has exactly the same name in the program but it is a 
completely different variable. To stop this happening enter the keyword 
<I>Static</I> instead of <I>Dim</I>:</P><B><PRE>  <FONT color=#23238e>Private Sub</FONT> Command1_Click ()

    <FONT color=#23238e>Static</FONT> number <FONT color=#23238e>As Integer</FONT>           <FONT color=green>' Create a static local variable</FONT>



    number = number + 1

    <FONT color=#23238e>Print</FONT> number

  <FONT color=#23238e>End Sub</FONT>

</PRE></B>
<P>This time instead of the local variable being destroyed when the procedure 
terminates its value remains until the whole program ends. Thus, we can now see 
a list of numbers being incremented by 1 every time the command button is 
clicked.</P>
<P><B>Note:</B> The new static variable is still local in scope, if any other 
procedure tries to access this variable it will be unable to do so. Add a second 
command button, which will add a new ‘<TT>Click</TT>’ procedure, and try 
amending or printing the value of the static variable.</P>
<P>The contents of local arrays can also be preserved while the program is still 
running. To do this add the ‘<TT>Static</TT>’ keyword instead of ‘<TT>Dim</TT>’ 
just like the variable example above.</P><B><PRE>  <FONT color=#23238e>Static</FONT> salaries(199) <FONT color=#23238e>As Long</FONT>

</PRE></B><BR>
<HR>
<A name=Constants>
<H2><I>Constants</I></H2></A>
<P>Constants are similar to variables but only have a single value throughout 
the execution of a program. The contents of variables can change as often as 
necessary. So why use a constant if it can only hold one value? Well often in a 
program it is neccassary to use the same number or string repeatedly. For 
example, in a program to calculate end of year accounts there will be several 
parts of the program refering to the current value of V.A.T. We could hard code 
the value into the program everywhere it is used, but it would be tedious to 
change if the government altered the rate. Alternatively we could use a standard 
variable called ‘VAT’ to hold the value and set it on the <TT>Form_Load</TT> 
event. However, what happens if there is a bug in the program and the contents 
of this variable is changed accidentally to something else.</P>
<P>One solution which solves the above two problems is to use a constant. In the 
following example a constant named ‘VAT’ is declared and assigned the value 
1.175. It is used in the <TT>Print</TT> statement with the variable 
<TT>bill_total</TT> to calculate the total bill amount. Notice that instead of 
writing 1.175 in the formula we refer to the constant by name.</P>
<P>Example:</P><B><PRE>  <FONT color=#23238e>Const</FONT> VAT = 1.175            <FONT color=green>' Declare and set the value of the constant</FONT>

  <FONT color=#23238e>Dim</FONT> bill_total <FONT color=#23238e>As Currency</FONT>   <FONT color=green>' Declare a local variable to hold bill total</FONT>



  bill_total = 560.95



  <FONT color=#23238e>Print</FONT> "Total = "; bill_total * VAT

</PRE></B>
<P>Like variables, constants also have scoping rules. There are public constants 
available to any module or unit in the current project, module wide constants 
available to any unit within the current module, and local constants accessable 
only within the current unit (procedure/function). 
<P> 
<OL>
  <LI><B>Local</B> - use ‘<TT>Const</TT>’ within the required procedure. 
  <LI><B>Module</B> - use ‘<TT>Private Const</TT>’ within the 
  <I>Declarations</I> section on a form or module. 
  <LI><B>Public</B> - use ‘<TT>Public Const</TT>’ within the <I>Declarations</I> 
  section of a module (e.g. Module1.bas). </LI></OL>
<HR>
<A name=Arrays>
<H2><I>Arrays</I></H2></A>
<P>Variables are useful for storing small pieces of information, but not good 
for large amounts of very similar information. For example, to hold the salaries 
of two hundred employees would require 200 different variable names. A much more 
efficient way is to use a data structure called an <I>array</I>.</P>
<P>An array is similar to a row of pigeon-holes. The whole array has one name, 
and each pigeon-hole has an <I>address</I>. For the above salaries problem we 
need an array which has 200 <I>elements</I> (pigeon-holes). To do this we use 
the <TT>Dim</TT> command that we used to create new variables. However, a size 
is also allocated.</P><PRE>  Dim <I>array_name</I> (<I>size</I>) [As <I>Type</I>]

</PRE>
<P>Example: <B><TT><FONT color=#23238e>Dim</FONT> salaries(199) <FONT 
color=#23238e>As Long</FONT></TT></B></P>
<P>The above example creates an array with 200 elements. The size is set to 199 
because by default VB starts numbering from 0.</P>
<P>If we know that ‘Fred’ is employee number 24 and has a salary of 25,000 then 
we can enter this amount into the array using:</P><B><PRE>  salaries(23) <FONT color=#23238e>=</FONT> 25000

</PRE></B>
<P>Conversely, if we want to know how much employee 189 earns then we can 
use:</P><B><PRE>  lblEarnings.Caption <FONT color=#23238e>=</FONT> salaries(188)

</PRE></B>
<P><B>Note:</B> The above two examples both access the element one below the 
required number. This is because VB numbers the array from 0, not 1. However, VB 
can be forced to start at 1 by entering the statement ‘<TT>Option Base 1</TT>’ 
in the declarations section of a form or a module.</P>
<HR>
<A name="Dynamic Arrays">
<H2><I>Dynamic Arrays</I></H2></A>
<P>There may be times when writing an application, however, when a program needs 
to change the size of the array. To do this a ‘dynamic’ array can be used. First 
the array must be declared in the same way but without a number of elements 
specified:</P><B><PRE>  <FONT color=#23238e>Dim</FONT> books() <FONT color=#23238e>As String</FONT>

</PRE></B>
<P>To change the size of this array use the ‘<TT>ReDim</TT>’ command and a 
specific number of elements:</P><B><PRE>  <FONT color=#23238e>ReDim</FONT> books(99)

</PRE></B>
<P>Normally the contents of an array is erased when redimensioning, however to 
stop this use:</P><B><PRE>  <FONT color=#23238e>ReDim Preserve</FONT> books(99)

</PRE></B>
<P>Like variables, arrays can also have different scopes:</P>
<OL>
  <LI><B>Public</B> - available to <U>any form or module</U> contained in the 
  project. 
  <LI><B>Module</B> - available to <U>any procedure</U> on the form on which it 
  is placed. 
  <LI><B>Procedure</B> - available <U>only within the procedure</U> in which it 
  is declared. </LI></OL><BR>
<HR>
<A name=function></A>
<H1>
<CENTER><FONT color=#008000>Functions</FONT></CENTER></H1><BR>
<CENTER><B>[ <A 
href="#What are functions">What 
are functions and how do I use them?</A> ]<BR>[ <A 
href="#File">File</A> 
| <A 
href="#Number">Number</A> 
| <A 
href="#String">String</A> 
| <A 
href="#TimeDate">Time/Date</A> 
| <A 
href="#Variable">Variable 
Conversion</A> ]</B></CENTER><A name="What are functions">
<H2><I>What are functions and how do I use them?</I></H2></A>
<P>Functions are similar to procedures but always return a value of some sort. 
If a procedure does not return a value then it can just be called, but with 
functions the value passed back must be handled some how.</P><BR>
<H3>Example 1: (No Parameters)</H3>
<P>A useful function to start with is <TT><B>Time</B></TT>. This role of this 
function is to return the current system clock time; it does not take any 
parameters. To try this function out create a new label control on a suitable 
form. Next place a Timer control on the form as well and set its 
<TT><B>Interval</B></TT> to <TT><B>1000</B></TT>. Double click on the Timer 
control and enter the line <TT><B>Label1.Caption = Time</B></TT>. When you run 
the program you should see the label control showing the time updated every 
second.</P><BR>
<H3>Example 2: (A Single Parameter)</H3>
<P>The above Time function is simple to use because it does not require any 
parameters. However, most functions require parameters to supply key information 
to the module in order for it to work out the return value. The Time function 
does not require a parameter because all it needs to do is interogate the system 
clock. The function <TT><B>UCase</B></TT> is a simple function requiring only 
one parameter to be passed. To pass variables and constants as parameters they 
must be enclosed in brackets after the function name. Multiple parameters must 
be separated by commas. Create a text control on a form and then in the 
<TT><B>KeyPress</B></TT> event write: <TT><B>If KeyAscii = 13 then Text1.Text = 
UCase(Text1.Text)</B></TT>. Run the program, enter some text and press RETURN. 
The result should be that the text in the text box turns to upper-case.</P><BR>
<H3>Example 3: (Multiple Parameters)</H3>
<P>In example 2 the function returned different text depending on the string 
sent to it in the parameter. Other functions require additional parameters to 
tell it how to handle the other parameters. For example, the function 
<TT><B>Mid$</B></TT> takes one parameter to pass in the text to be used, one 
parameter to set the starting point (measured in characters), and then a third 
and optional parameter to specify how many characters to return. We can use this 
Mid$ function to return the word 'University' out of the string 'Napier 
University, Edinburgh'. In the <TT><B>Form Activate</B></TT> event enter the 
following code: <TT><B>Label1.Caption = Mid$("Napier University, Edinburgh", 8, 
10)</B></TT>. When run all that will be displayed in Label1 will be the word 
'University'. Try leaving out the last parameter which is optional and see what 
happens.</P><BR>
<H3>Example 4: (Using Functions as Parameters)</H3>
<P>Can the returning value of one function be used as the input parameter for 
another? The answer is yes, the example below does just that.</P>
<P>Suppose we need to build an input text box on a form to enter a person's name 
but later in the program we do not want to use the full name just the surname. 
An easy (or perhaps lazy) solution would be to use two separate text box 
controls, one for the first name and the other for the surname. However, this 
uses up more screen real estate and could be slower to enter. Where possible it 
is better to get the computer to do the hard work instead of the user. To do 
this we are going to create only one text input box and use a label control to 
output the result of the function. In the <TT><B>KeyPress</B></TT> event of the 
text box place the following code:</P><B><PRE><FONT color=#23238e>Private Sub</FONT> Text1_KeyPress <FONT color=#23238e>(</FONT>KeyAscii <FONT color=#23238e>As Integer)</FONT>
  <FONT color=#23238e>Dim</FONT> strFullName, strSurname <FONT color=#23238e>As String</FONT>
  
  <FONT color=#23238e>If</FONT> KeyAscii <FONT color=#23238e>=</FONT> 13 <FONT color=#23238e>Then</FONT>
    strFullName <FONT color=#23238e>=</FONT> Text1.Text
    strSurname <FONT color=#23238e>= Mid$(</FONT>strFullName, <FONT color=#23238e>InStr(</FONT>1, strFullName, " "<FONT color=#23238e>) +</FONT> 1<FONT color=#23238e>)</FONT>
    Label1.Caption <FONT color=#23238e>=</FONT> "Surname = " <FONT color=#23238e>+ UCase(</FONT>strSurname<FONT color=#23238e>)</FONT>
  <FONT color=#23238e>End If

End Sub</FONT>
</PRE></B>
<P>This example uses three of Visual Basic's built in functions: Mid$, InStr, 
and UCase. The function <TT><B>Mid$</B></TT> in this case is using two 
parameters (the option third parameter is not being used). However, the second 
parameter which sets the starting character has been replaced by the function 
<TT><B>InStr</B></TT> which is used to return the position of located 
characters. In this case InStr is looking for the first occurrance of the 
character " " (space). We will use this to determine where the first name ends 
and the surname begins. One is added to this returning value because we do not 
want to return the space, we want to start one letter after the space. In Visual 
Basic an functions that return values that will be used as input parameters to 
other functions are evaluated first. The example above uses two local varaibles 
to try and make the code look less complicated and make it easier to read. 
However, it could be rewritten so that the the result from the Mid$ function is 
used as the input to UCase:</P><B><PRE><FONT color=#23238e>Private Sub</FONT> Text1_KeyPress <FONT color=#23238e>(</FONT>KeyAscii <FONT color=#23238e>As Integer)</FONT>
  
  <FONT color=#23238e>If</FONT> KeyAscii <FONT color=#23238e>=</FONT> 13 <FONT color=#23238e>Then</FONT> Label1.Caption <FONT color=#23238e>= UCase(Mid$(</FONT>Text1.Text, <FONT color=#23238e>InStr(</FONT>1, Text1.Text, " "<FONT color=#23238e>) +</FONT> 1<FONT color=#23238e>))

End Sub</FONT>
</PRE></B>
<P>This shortened example will do exactly the same as the previous example 
except the label will not show 'Surname = ' before displaying the name. It 
should be noted that although both examples perform the same job the first is 
much more readable and thus less prone to bugs. When too many functions are used 
on a single line it is difficult matching closing brackets. If you find you are 
using too many functions on a single line split them up over several lines with 
the help of some temporary local varaibles.</P><BR>
<H3>Example 5: (Making your own)</H3>
<P>If Visual Basic does not have a suitable built in function then it is 
possible to build your own. To create a user defined function open up a code 
window and move the cursor down to the bottom past the last <TT><B>End 
Sub</B></TT> statement. Here, enter <TT><B>Function <I>function_name</I> 
()</B></TT>. Replace the word 'function_name' with the exact name you wish to 
call the function. After pressing RETURN the code window should clear and 
display the new function on its own with the added line <TT><B>End 
Function</B></TT> at the end.</P>
<P>In this example we will write our own function to return the current time in 
New York. We will create a new form with a label control and a command button 
control on it (see below).</P>
<P>Using the method outlined above create a new function with the code shown 
below:</P><B><PRE><FONT color=#23238e>Function</FONT> NY_time <FONT color=#23238e>()</FONT>
  <FONT color=#23238e>Dim</FONT> strTempTime <FONT color=#23238e>As String</FONT>
  <FONT color=#23238e>Dim</FONT> intNY_hour <FONT color=#23238e>As Integer</FONT>

  strTempTime <FONT color=#23238e>= Time$</FONT>
  intNY_hour <FONT color=#23238e>= Val(Left$(</FONT>strTempTime, 2<FONT color=#23238e>)) -</FONT> 5

  <FONT color=#23238e>Rem</FONT> <FONT color=green>Correct for passing back over a day</FONT>
  <FONT color=#23238e>If</FONT> intNY_hour <FONT color=#23238e>&lt;</FONT> 0 <FONT color=#23238e>Then</FONT> intNY_hour <FONT color=#23238e>=</FONT> intNY_hour <FONT color=#23238e>+</FONT> 24

  intNY_time <FONT color=#23238e>= Str(</FONT>intNY_hour<FONT color=#23238e>) + Right$(</FONT>strTempTime, 6<FONT color=#23238e>)
End Function</FONT>
</PRE></B>
<P>Next double click on the command button and enter the following code:</P><B><PRE><FONT color=#23238e>Private Sub</FONT> cmdGetTime_Click <FONT color=#23238e>()</FONT>
  lblTime.Caption <FONT color=#23238e>=</FONT> "Time in New York is " <FONT color=#23238e>+</FONT> intNY_time()

<FONT color=#23238e>End Sub</FONT>
</PRE></B>
<P>This function is quite simple it just reads the system clock and takes five 
hours off the hour. A check to see if the hour is less than zero is require in 
case the time in New York is the evening before.</P>
<P><B>Exercise:</B> Try expanding this function to make it more generalisable. 
Create a parameter to pass in the time zone difference (in hours) from 
Greenwich.</P>
<HR noShade SIZE=1>

<P>Below are listed some of the more important functions in Visual Basic. To 
find out exactly how many parameters each function requires and what type of 
data the parameter should be use the online help within Visual Basic.</P><A 
name=File>
<H2><I>File</I></H2></A>
<UL>
  <LI><B>FileAttr</B> - Returns file mode or operating system file information 
  about an open file. 
  <LI><B>FileDateTime</B> - Returns a String that indicates the date and time a 
  specified file was created or last modified. 
  <LI><B>FileLen</B> - Returns a Long integer that indicates the length of a 
  file in bytes. 
  <LI><B>FreeFile</B> - Returns the next valid unused file number. 
  <LI><B>GetAttr</B> - Returns an integer that indicates a file, directory, or 
  volume label's attributes. 
  <LI><B>Loc</B> - Returns the current position within an open file. 
  <LI><B>LOF</B> - Returns the size of an open file in bytes. 
  <LI><B>Seek</B> - Returns the current file position. </LI></UL>
<HR noShade SIZE=1>
<A name=Number>
<H2><I>Number</I></H2></A>
<UL>
  <LI><B>Abs</B> - Returns the absolute value of a number. 
  <LI><B>Atn</B> - Returns the arctangent of a number. 
  <LI><B>Cos</B> - Returns the cosine of an angle (angle in radians). 
  <LI><B>Sin</B> - Returns the sine of an angle (angle in radians). </LI></UL>
<HR noShade SIZE=1>
<A name=String>
<H2><I>String</I></H2></A>
<UL>
  <LI><B>InStr</B> - Returns the position of the first occurrence of one string 
  within another string. 
  <LI><B>LCase, LCase$</B> - Returns a string in which all letters of an 
  argument have been converted to lowercase. 
  <LI><B>Left, Left$</B> - Returns the leftmost n characters of a string 
  argument. 
  <LI><B>Len</B> - Returns the number of characters in a string expression or 
  the number of bytes required to store a variable. 
  <LI><B>LTrim, LTrim$</B> - Returns a copy of a string with leading spaces 
  removed. 
  <LI><B>Mid, Mid$</B> - Returns a string that is part of some other string. 
  <LI><B>Right, Right$</B> - Returns the rightmost n characters of a string 
  argument. 
  <LI><B>RTrim, RTrim$</B> - Returns a copy of a string with trailing 
  (rightmost) spaces removed. 
  <LI><B>Space, Space$</B> - Returns a string consisting of a specified number 
  of spaces. 
  <LI><B>Trim, Trim$</B> - Returns a copy of a string with both leading and 
  trailing spaces removed. 
  <LI><B>UCase, UCase$</B> - Returns a string with all letters of the argument 
  converted to uppercase. </LI></UL>
<HR noShade SIZE=1>
<A name=TimeDate>
<H2><I>Time/Date</I></H2></A>
<UL>
  <LI><B>Date, Date$</B> - Returns the current date. 
  <LI><B>IsDate</B> - Returns a value indicating whether of not a Variant 
  argument can be converted to a date. 
  <LI><B>Minute</B> - Returns an integer between 0 and 59, inclusive, that 
  represents the minute of the hour corresponding to the time provided as an 
  argument. 
  <LI><B>Month</B> - Returns an integer between 1 and 12, inclusive, that 
  represents the month of the year for a date argument. 
  <LI><B>Now</B> - Returns a date that represents the current date and time 
  according to the setting of the computer's system date and time. 
  <LI><B>Time, Time$</B> - Returns the current system time. 
  <LI><B>Timer</B> - Returns the number of seconds that have elapsed since 12:00 
  a.m. (midnight). 
  <LI><B>Weekday</B> - Returns an integer between 1 (Sunday) and 7 (Saturday) 
  that represents the day of the week for a date argument. 
  <LI><B>Year</B> - Returns an integer between 100 and 9999, inclusive, that 
  represents the year of a date argument. </LI></UL>
<HR noShade SIZE=1>
<A name=Variable>
<H2><I>Variable Conversion</I></H2></A>
<UL>
  <LI><B>CCur</B> - Explicitly converts expressions to the Currency data type. 
  <LI><B>CDbl</B> - Explicitly converts expressions to the Double data type. 
  <LI><B>CInt</B> - Explicitly converts expressions to the Integer data type. 
  <LI><B>CLng</B> - Explicitly converts expressions to the Long data type. 
  <LI><B>CSnd</B> - Explicitly converts expressions to the Single data type. 
  <LI><B>CStr</B> - Explicitly converts expressions to the String data type. 
  <LI><B>CVar</B> - Explicitly converts expressions to the Variant data type. 
  <LI><B>CVDate</B> - Converts an expression to a Variant of VarType 7 (Date). 
  </LI></UL>
<HR noShade SIZE=1>
<A name=pro_control></A>
<H1>
<CENTER><FONT color=#008000>Program Control</FONT></CENTER></H1>
<DIV align=center>
<TABLE cellSpacing=15 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top><B><A 
      href="#branching">Branching 
      Structures:</A>&nbsp;&nbsp;</B> 
      <UL>
        <LI><A 
        href="#if">If...Then</A> 

        <LI><A 
        href="#case">Case 
        Select</A> </LI></UL></TD>
    <TD vAlign=top><B><A 
      href="#repeating">Repeating 
      Structures:</A></B> 
      <UL>
        <LI><A 
        href="#loop-until">Do...Loop 
        Until</A> 
        <LI><A 
        href="#loop-while">Do...Loop 
        While</A> 
        <LI><A 
        href="#do-while">Do 
        While...Loop</A> 
        <LI><A 
        href="#do-until">Do 
        Until...Loop</A> 
        <LI><A 
        href="#for-next">For...Next</A> 

        <LI><A 
        href="#while-wend">While...Wend</A> 
        </LI></UL></TD></TR></TBODY></TABLE></DIV><BR>
<P>Visual Basic like other programming languages executes lines of code from the 
top of the program downwards. However, often a programmer does not wish all 
lines to be executed every time the program is run. Instead of writing several 
different programs for this job, branching and repeating commands can be 
used.</P>
<P>Branching commands are used to determine when to execute a small section of 
code and when not to run it. One example is the ‘<TT>If</TT>’ command. If 
something is true then the code will be run, if not it will not be executed and 
VB will continue further down the program.</P>
<P>Repeating commands are useful for running small sections of code several 
times. If a programmer needs to read 200 lines of text from a file he could use 
200 lines of code, one for every read statement, or alternatively a ‘<TT>For 
Next</TT>’ loop could do a similar job using just three or four lines! 
<P> 
<HR noShade SIZE=1>
<A name=branching>
<H2><I>Branching Structures</I></H2></A><BR><A name=if>
<H3>If...Then</H3></A>
<P>Single line If (Example):</P><B><PRE>  <FONT color=#23238e>If</FONT> bytDayOfWeek <FONT color=#23238e>=</FONT> 1 <FONT color=#23238e>Then</FONT> Label1.Caption = "Sunday"</PRE></B>
<P>Multi-line If (Example):</P><B><PRE>  <FONT color=#23238e>If</FONT> blnLeapYear = <FONT color=#23238e>True And</FONT> bytMonth = 2 <FONT color=#23238e>Then</FONT>
     <FONT color=#23238e>Print</FONT> "Current year is a leap year"

     <FONT color=#23238e>Print</FONT> "Month is February"

     <FONT color=#23238e>Print</FONT> "Thus number of days in month = 29"
  <FONT color=#23238e>End If</FONT>
</PRE></B>
<P>The multi-line If command requires the extra statement ‘<TT>End If</TT>’ to 
define the end of the If block.</P>
<P>In the following code a check is made to determine the price of cinema seats. 
Normal seats are priced at £4.40 while luxury seats are £6.00. Since there are 
only two types of seats the code only checks for standard and assumes luxury if 
this is false.</P>
<P>If and Else (Example):</P><PRE>  <B><FONT color=#23238e>If</FONT> strSeatType = "normal" <FONT color=#23238e>Then</FONT>
    Label1.Caption <FONT color=#23238e>=</FONT> "Price = £4.40"
  <FONT color=#23238e>Else</FONT>
    Label1.Caption <FONT color=#23238e>=</FONT> "Price = $6.00"
  <FONT color=#23238e>End If</FONT></B>
</PRE>
<P>However, if we adapt this cinema example to the theatre where there are more 
types of seats then we will require an ‘<TT>ElseIf</TT>’ statement. 
<P>If and ElseIf (Example):</P><PRE>  <B><FONT color=#23238e>If</FONT> strSeatType = "stalls" <FONT color=#23238e>Then</FONT>
    Label1.Caption <FONT color=#23238e>=</FONT> "Price = £8.25"
  <FONT color=#23238e>ElseIf</FONT> seat <FONT color=#23238e>=</FONT> "circle"
    Label1.Caption <FONT color=#23238e>=</FONT> "Price = £10.50"
  <FONT color=#23238e>Else</FONT>     <FONT color=green>' Assume the Upper Circle</FONT>
    Label1.Caption <FONT color=#23238e>=</FONT> "Price = £12.00"
  <FONT color=#23238e>End If</FONT></B>
</PRE><BR><BR><A name=case>
<H3>Case Select</H3></A>
<P>If more branches are required then a ‘<TT>Select Case</TT>’ command can be 
used. Notice that in the following example, several values can trigger the same 
case statement. For example, the months 1, 3, 5, 7, 8, 10 and 12 all are 31 days 
long. Instead of writing 12 separate case statements, all these values can be 
included in one case by using commas.</P>
<P>Case (Example):</P><PRE>  <B><FONT color=#23238e>Select Case</FONT> bytMonth
    <FONT color=#23238e>Case</FONT> 1, 3, 5, 7, 8, 10, 12
      number_of_days = 31
    <FONT color=#23238e>Case</FONT> 2
      number_of_days = 28
    <FONT color=#23238e>Case</FONT> 4, 6, 9, 11
      number_of_days = 30

  <FONT color=#23238e>End Select</FONT></B>
</PRE>
<P>The ‘<TT>End Select</TT>’ statement defines the end of the Case block. To 
‘trap’ any values not picked up by earlier cases used the ‘<TT>Case Else</TT>’ 
construct.</P><PRE>    <B>...

    <FONT color=#23238e>Case</FONT> 2

      number_of_days = 28

    <FONT color=#23238e>Case</FONT> 4, 6, 9, 11

      number_of_days = 30

    <FONT color=#23238e>Case Else</FONT>

      <FONT color=#23238e>MsgBox</FONT> "ERROR: Month must be between 1 and 12!"

  <FONT color=#23238e>End Select</FONT></B>

</PRE><BR>
<HR noShade SIZE=1>
<A name=repeating>
<H2><I>Repeating Structures (or Loops)</I></H2></A>
<P>The easist way to understand repetition is with the aid of a practical 
example. Consider the steps a milkman performs has he delivers pints of milk to 
all the houses in a street. There are four basic steps: 1) check number of pints 
requested on customer’s note, 2) fetch required pints from milk float, 3) carry 
back empties, and 4) move to next house in street. If the street has 20 houses 
then the milkman has to carry out 80 individual steps to deliver all the milk. A 
computer simulation of this could be written in Visual Basic using 80 lines of 
code, one line for each step. However, this is very inefficient. A much better 
way is to ‘wrap’ the four basic steps in some kind of repeating structure. 
Visual Basic supports the following types:</P>
<UL>
  <LI>Do...Loop Until 
  <LI>Do...Loop While 
  <LI>Do While...Loop 
  <LI>Do Until...Loop 
  <LI>For...Next 
  <LI>While...Wend </LI></UL><BR><A name=loop-until>
<H3>Do...Loop Until</H3></A>
<P>This type of repeating structure will <U>always</U> be executed at least once 
because the loop exit statement is at the end. The milkman problem could be 
solved in the following way:</P><PRE><B>  intHouseNumber = 1

  <FONT color=#23238e>Do</FONT>

    <FONT color=green>' Check the order

    ' Fetch correct order

    ' Carry back empties</FONT>

    intHouseNumber = intHouseNumber + 1

  <FONT color=#23238e>Loop Until</FONT> intHouseNumber &gt; 20

</B></PRE><BR><A name=loop-while>
<H3>Do...Loop While</H3></A>
<P>A ‘Do...Loop While’ loop is very similar to the previous ‘Do...Loop Until’. 
The difference is in the logic of the exit condition. For example, the ‘Loop 
While’ will repeat a block of instructions while a condition <I>remains</I> 
true, but the ‘Loop Until’ loop will exit when the exit condition <I>turns</I> 
true.</P><BR><A name=do-while>
<H3>Do While...Loop</H3></A>
<P>This loop is functionally equivalent to the ‘Do...Loop While’ except that the 
loop test condition is tested at the start of the loop. In practice this means 
that the ‘Do While...Loop’ might not be executed at all (if condition is false), 
whereas the ‘Do...Loop While’ will always be executed at least once.</P>
<P>Do While...Loop (Never executes loop):</P><PRE><B>  <FONT color=#23238e>Dim</FONT> a as Byte



  a = 1

  <FONT color=#23238e>Do While</FONT> a &gt; 10

    a = a - 1

  <FONT color=#23238e>Loop</FONT>

</B></PRE>
<P>Do While...Loop (Example which will execute loop):</P><PRE><B>  <FONT color=#23238e>Dim</FONT> a as Byte



  a = 20

  <FONT color=#23238e>Do While</FONT> a &gt; 10

    a = a - 1

  <FONT color=#23238e>Loop</FONT>

</B></PRE><BR><A name=do-until>
<H3>Do Until...Loop</H3></A>
<P>This loop, like the previous ‘Do While...Loop’ type, tests the condition at 
the beginning of the loop. However, whereas the previous loop repeated 
<I>while</I> the condition was true, the ‘Do Until...Loop’ repeats <I>until</I> 
the condition is true. The milkman simulation, discussed above, could be 
re-coded to use a ‘Do Until...Loop’ as follows:</P><PRE><B>  intHouseNumber = 1

  <FONT color=#23238e>Do Until intHouseNumber &gt; 20</FONT>

    <FONT color=green>' Check the order

    ' Fetch correct order

    ' Carry back empties</FONT>

    intHouseNumber = intHouseNumber + 1

  <FONT color=#23238e>Loop</FONT>

</B></PRE><BR><A name=for-next>
<H3>For...Next</H3></A>
<P>All the loops discussed so far have been <B>non-deterministic</B>, that is 
the number of times the loop will execute is <I>unknown</I>. However, there is 
one type of loop where the number of times it will execute is already known, 
this is known as a <B>deterministic</B> loop. The ‘For...Next’ loop can be used 
in any situation where the number of times it will repeat is known and fixed. 
For example, in the milkman situation it is known that there are 20 houses. In 
other situation it is known that there are so many miles between two towns, 7 
days in a week, 10 floors in a particular office block, etc.</P><PRE><B>  <FONT color=#23238e>Dim</FONT> intHouseNumber <FONT color=#23238e>As Integer</FONT>



  <FONT color=#23238e>For</FONT> intHouseNumber = 1 <FONT color=#23238e>To</FONT> 20

    <FONT color=green>' Check the order

    ' Fetch correct order

    ' Carry back empties</FONT>

  <FONT color=#23238e>Next</FONT>

</B></PRE>
<P>If this ‘For...Next’ loop is compared with the other non-deterministic loops 
then one omission becomes apparent - a statement adding one to the house number 
is missing. This line is no longer needed because this type of loop 
automatically increments the value of its condition variable.</P>
<P>The ‘For...Next’ loop condition variable does not always have to be 
incremented by one. Larger increments can be set by using the ‘Step’ parameter. 
Using this the milkman simulation could be changed so that he walks up one side 
of the street first (odd numbered houses), stops at number 19, crosses over the 
street to number 20, and works his way back down the even numbered houses. 
‘Print’ statements have been added so that the order of houses visited can be 
seen.</P><PRE><B>  <FONT color=#23238e>Dim</FONT> intHouseNumber <FONT color=#23238e>As Integer</FONT>



  <FONT color=#23238e>For</FONT> intHouseNumber = 1 <FONT color=#23238e>To</FONT> 19 <FONT color=#23238e>Step</FONT> 2

    <FONT color=green>' Check the order

    ' Fetch correct order

    ' Carry back empties</FONT>

    <FONT color=#23238e>Print</FONT> intHouseNumber

  <FONT color=#23238e>Next</FONT> intHouseNumber



  <FONT color=#23238e>For</FONT> intHouseNumber = 20 <FONT color=#23238e>To</FONT> 2 <FONT color=#23238e>Step</FONT> -2

    <FONT color=green>' Check the order

    ' Fetch correct order

    ' Carry back empties</FONT>

    <FONT color=#23238e>Print</FONT> intHouseNumber

  <FONT color=#23238e>Next</FONT> intHouseNumber

</B></PRE><BR><A name=while-wend>
<H3>While...Wend</H3></A>
<P>The ‘While...Wend’ loop is functionally equivalent to the ‘Do While...Loop’ 
discussed above. Once again this type of repeating structure should be used in 
situations where the loop will execute at least once. For example, a program 
which checks ban PIN numbers would always execute at least once:</P><PRE><B>  <FONT color=#23238e>Private Sub</FONT> Form_Activate()

    <FONT color=#23238e>Dim</FONT> intEntered_PIN <FONT color=#23238e>As Integer</FONT>

    <FONT color=#23238e>Const</FONT> intCorrect_PIN = 1927

  

    <FONT color=#23238e>While</FONT> intEntered_PIN &lt;&gt; intCorrect_PIN

      intEntered_PIN = InputBox("Please enter your PIN:", "PIN", "")

    <FONT color=#23238e>Wend</FONT>

  <FONT color=#23238e>End Sub</FONT>

</B></PRE>
<P><B>Note:</B> In reality an InputBox would not be used since the typed PIN can 
be seen on the screen and also the correct PIN would not be held in a constant 
but instead retrieved from an encrypted file, but as an example it demonstrates 
the potential of ‘While...Wend’ loops.</P><BR>
<H3>Nesting loops</H3>
<P>In the milkman example above the milkman performs the basic 4 steps at each 
of the 20 houses he serves. However, consider the more complex problem of 
simulating the pouring of cups of tea at a Church meeting. The problem is more 
complex because the tea pot holds only 5 cups of tea and there are 100 to serve. 
To do solve this problem two loops can be used, one inside another (nested):</P><PRE><B>  <FONT color=#23238e>Dim</FONT> cups_filled as Byte



  bytCupsFilled = 0

  <FONT color=#23238e>Do</FONT>

    <FONT color=green>' boil water

    ' add tea bags to pot

    ' fill pot with boiling water</FONT>

    <FONT color=#23238e>For</FONT> bytPour = 1 to 5

      <FONT color=green>' pour tea into cup

      ' move to next cup</FONT>

      bytCupsFilled = bytCupsFilled + 1

    <FONT color=#23238e>Next</FONT> bytPour

  <FONT color=#23238e>Loop Until</FONT> bytCupsFilled = 100

</B></PRE>
<P><B>Note:</B> Different types of loops can be nested inside one another. In 
the above example the ‘For...Next’ loop is nested within a ‘Do...Loop Until’ 
structure.</P>
<HR noShade SIZE=1>

<SCRIPT><!--
    if (self == top) location.href = "/visualbasic.html";
    else if(top.awsad_refresh) top.awsad_refresh("visualbasic.html");
    //--></SCRIPT>
</BODY></HTML>
